API nedir, ne işe yarar?
API, farklı yazılım uygulamalarının veya sistemlerin birbirleriyle iletişim kurmasını sağlayan bir arayüzdür. Yani, bir programın başka bir programla "konuşmasını" mümkün kılar.

Minimal API, ASP.NET Core’da, Controller sınıfları, Startup.cs, IActionResult, routing attributes gibi yapılar olmadan doğrudan Program.cs dosyasında basit ve sade bir biçimde HTTP endpoint’leri tanımlamana olanak tanıyan bir yaklaşımdır.
"Minimal kod, maksimum iş" felsefesiyle REST API'leri oluşturmanı sağlar.

| Özellik                               | Açıklama                                     |
| ------------------------------------- | -------------------------------------------- |
| 🔸 Basit yapı                         | Sadece `Program.cs` yeterli                  |
| 🔸 Hızlı başlangıç                    | Controller, Startup, Service yapısı gerekmez |
| 🔸 Performans odaklı                  | Gereksiz abstraction yoktur, daha hızlıdır   |
| 🔸 Geliştirici dostu                  | Az satırla çok iş yapılır                    |
| 🔸 Test ve küçük servisler için ideal | Mikro servis yapıları için uygundur          |

Örnek MinimalApi
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/", () => "Hello World!");
app.MapGet("/hello", () => "Merhaba!");
app.MapGet("/square/{number}", (int number) => number * number);

app.Run();

| Klasik ASP.NET Core                   | Minimal API                    |
| ------------------------------------- | ------------------------------ |
| Controller sınıfları gerekir          | Gerekmez                       |
| `[HttpGet]`, `[Route]` vs kullanılır  | `MapGet`, `MapPost` kullanılır |
| Startup.cs / ConfigureServices vardır | Gerekmez                       |
| Daha fazla boilerplate kod            | Daha az, sade yapı             |



Basit örnekle açıklamak gerekirse:
Diyelim bir hava durumu uygulaması var. Bu uygulama, hava durumu verilerini dışarıdan bir kaynaktan (mesela bir hava durumu servisi) almak ister.
API, bu uygulamanın dış servisle iletişim kurması için belirlenmiş kurallar ve protokoller setidir.
Uygulama API aracılığıyla servisden güncel hava durumu verisini ister, servis de uygun formatta yanıt verir.

API’nin temel özellikleri:
Veri alışverişi: Uygulamalar arası veri gönderip alma işlemini kolaylaştırır.
Standart iletişim: İki sistemin nasıl konuşacağını, hangi verileri nasıl isteyeceğini ve cevaplayacağını belirler.
Soyutlama: API kullanıcıları, sistemin iç detaylarını bilmeden işlevleri kullanabilir.
Tekrarlanabilirlik: API’ler standart olduğu için birçok uygulama tarafından tekrar tekrar kullanılabilir.

Web API Nedir?
Web API, farklı uygulamaların veya sistemlerin internet üzerinden HTTP protokolü aracılığıyla veri alışverişi yapmasını sağlayan arayüzdür.
HTTP: Web tarayıcılarının ve sunucuların kullandığı iletişim protokolüdür. (GET, POST, PUT, DELETE gibi metotları vardır.)
Web API, bu protokolü kullanarak, bir uygulamanın başka bir uygulamaya veri göndermesini veya ondan veri almasını sağlar.

Web API’nin Temel Özellikleri:
İnternet üzerinde çalışır.
Genellikle REST veya SOAP gibi standart mimariler kullanır.
Veri formatı olarak genellikle JSON veya XML kullanılır.
Platform bağımsızdır; farklı programlama dilleri ve sistemler tarafından kullanılabilir.

REST’in Temel Kavramları
Kaynak (Resource):
İnternet üzerindeki her şey bir "kaynak" olarak düşünülebilir. Örneğin; kullanıcılar, ürünler, mesajlar, siparişler birer kaynaktır.
Her kaynağın benzersiz bir URI (Uniform Resource Identifier) adresi vardır. Örnek: https://api.example.com/users/123
HTTP Metodları:
REST API, HTTP protokolündeki metodları kullanarak kaynaklar üzerinde işlem yapar.
En sık kullanılan metodlar:

GET: Veri sorgulamak (veri çekmek) için
POST: Yeni veri oluşturmak için
PUT: Var olan veriyi güncellemek için
DELETE: Veriyi silmek için
PATCH: Var olan verinin bir kısmını güncellemek için

Stateless (Durumsuzluk):
REST API, sunucunun her isteği bağımsız ve öncekilerden bağımsız olarak ele aldığı bir mimaridir.
Yani, sunucu istemcinin önceki isteklerine dair bilgiyi saklamaz. Her istek kendi içinde gerekli tüm bilgiyi taşır.

Temsiller (Representations):
Kaynaklar farklı formatlarda temsil edilebilir; en yaygınları JSON ve XML’dir.
API genellikle JSON formatında veri gönderir ve alır çünkü JSON hafiftir ve çoğu programlama dili tarafından kolay işlenir.

URI yapısı:
Kaynaklar hiyerarşik ve mantıklı URI yapıları ile tanımlanır. Örneğin:
/users → Tüm kullanıcılar
/users/5 → ID'si 5 olan kullanıcı
/users/5/orders → 5 numaralı kullanıcının siparişleri

| HTTP Metodu | İşlem                               | URI Örneği   | Açıklama                                |
| ----------- | ----------------------------------- | ------------ | --------------------------------------- |
| GET         | Veri alma                           | /products    | Tüm ürünleri listeler                   |
| GET         | Belirli veri alma                   | /products/10 | ID'si 10 olan ürünü getirir             |
| POST        | Yeni veri oluşturma                 | /products    | Yeni ürün ekler                         |
| PUT         | Var olan veriyi tamamen güncelleme  | /products/10 | ID 10 olan ürünü tamamen değiştirir     |
| PATCH       | Var olan verinin kısmını güncelleme | /products/10 | ID 10 ürünün bazı alanlarını değiştirir |
| DELETE      | Veri silme                          | /products/10 | ID 10 ürünü siler                       |

RESTful API Tasarımında İyi Pratikler
İsimlendirme: Kaynak isimleri çoğul kullanılır (/users, /orders).

HTTP durum kodları: İsteklerin sonucunu belirtmek için doğru HTTP kodları kullanılır.
Örnekler:

200 OK → Başarılı GET isteği
201 Created → Başarılı POST ile veri oluşturuldu
204 No Content → Başarılı DELETE işlemi
400 Bad Request → İstek hatalı
404 Not Found → Kaynak bulunamadı
500 Internal Server Error → Sunucu hatası

Versiyonlama: API geliştirirken sürüm yönetimi önemlidir. URI’da veya header’da versiyon belirtilir. Örnek: /api/v1/users

Filtreleme, sıralama ve sayfalama: Büyük veri setlerinde API’nin performansı ve kullanılabilirliği için desteklenir.
Örnek: /products?category=electronics&sort=price_asc&page=2

RESTful API Nasıl Çalışır? Basit Akış
İstemci (client), bir HTTP isteği gönderir (örneğin, GET /users).
Sunucu, isteği alır ve ilgili kaynağı işler.
Sunucu, isteğe karşılık JSON formatında veri döner.
İstemci dönen veriyi işler ve kullanıcıya gösterir.

Örnek JSON Yanıtı
GET /users/5 isteğine gelen örnek cevap:

{
  "id": 5,
  "name": "Atalay Özcan",
  "email": "atalay.ozcan@example.com",
  "createdAt": "2025-07-28T12:00:00Z"
}


Route Templates (Yol Şablonları) Nedir?
Web uygulamalarında, özellikle RESTful API veya MVC (Model-View-Controller) yapılarında, gelen HTTP isteklerinin hangi kod bloğuna yönlendirileceğini belirleyen URL kalıplarıdır.
Yani, URL yapısı nasıl olacak ve URL içindeki hangi parçalar (segmentler) hangi verilere karşılık gelecek, onu tanımlayan yapıdır.

Route Templates’in Alt Başlıkları
1. Route Parameters (Yol Parametreleri)
URL içerisinde değişken parçalardır.
Bu parametreler, URL'deki belirli bir bölümü temsil eder ve değer olarak dinamik bilgi alır.
Genellikle {parametreAdi} şeklinde tanımlanır. 
Örnek: /products/{id}
Burada id bir parametredir.
İstek /products/5 ise, id = 5 olarak alınır.
Bu sayede farklı ürünlerin detayları aynı route şablonuyla alınabilir.

2. Optional Parameters (Opsiyonel Parametreler)
Bazı parametrelerin zorunlu değil, isteğe bağlı olmasını sağlar.
Parametre adının sonuna ? işareti konur.
Örnek:/products/{id?}
Burada id parametresi isteğe bağlıdır.
/products/5 veya sadece /products istekleri her ikisi de geçerli olur.
Kodda, id parametresi boş (null) olabilir ve buna göre işlem yapılabilir.

Constraints (Kısıtlamalar)
Parametrelerin alabileceği değerleri sınırlamak için kullanılır.
Parametrenin sadece belirli türde veya formattaki değerleri kabul etmesini sağlar.
Route template içinde süslü parantez içine : ile kısıtlama eklenir.

Yaygın kullanılan constraint örnekleri:
| Constraint  | Açıklama                     | Örnek                    |
| ----------- | ---------------------------- | ------------------------ |
| `int`       | Sadece tam sayı kabul eder   | `{id:int}`               |
| `bool`      | Sadece boolean değer         | `{flag:bool}`            |
| `datetime`  | Tarih formatında olmalı      | `{date:datetime}`        |
| `length(3)` | En fazla 3 karakter          | `{code:length(3)}`       |
| `regex()`   | Düzenli ifadeye uygun olmalı | `{name:regex(^[a-z]+$)}` |

Özet
| Kavram              | Tanım                                                   | Örnek URL            | Açıklama                           |
| ------------------- | ------------------------------------------------------- | -------------------- | ---------------------------------- |
| Route Parameters    | URL’de dinamik veri olarak kullanılan değişken parçalar | `/users/{userId}`    | `userId` değeri URL’den alınır     |
| Optional Parameters | Zorunlu olmayan parametreler                            | `/users/{userId?}`   | `userId` olabilir veya olmayabilir |
| Constraints         | Parametrelerin değer tipini/formunu sınırlayan kural    | `/products/{id:int}` | `id` sadece tam sayı olmalı        |

//Basic Route
app.MapGet("/users/{userId}/posts/{slug}", (int userId, string slug) =>
{
    return $"User ID: {userId}, Post Slug: {slug}";
});

//Constrained Route Parameters
app.MapGet("/products/{id:int:min(1):max(100)}", (int id) =>
{
   return $"Product ID: {id}";
});

//Optional Route Parameters
app.MapGet("/reports/{year?}", (int? year = 2016) =>
{
    return $"Report of the year: {year}";
});

Catch-All Routes (Türkçesi: Yakalama Rotaları veya Tümünü Yakalama Rotaları), web uygulamalarında veya API yönlendirmelerinde, 
gelen istek URL'sinin belirli bir kalıba uymayan veya önceden tanımlanmamış tüm yolları yakalamak için kullanılan özel bir rota türüdür.

Catch-All Route Nedir?
Gelen URL’de belirtilen şablona uymayan tüm URL’leri yakalayan route (yol) şablonudur.
Genellikle daha esnek ve geniş kapsamlı yönlendirme için kullanılır.
Özellikle 404 sayfası (sayfa bulunamadı) veya dinamik içerik yükleme gibi durumlarda faydalıdır.

Nasıl Çalışır?
Normalde route’lar spesifik ve belirli kalıplara bağlıdır.
Catch-All route, URL’nin kalan tüm kısımlarını tek bir parametre olarak alır.
Bu parametre sayesinde URL’nin geri kalan kısmı string olarak elde edilir.

Örnek (ASP.NET Core’da):
// Route template: catch-all parametresi **
[Route("files/{*filepath}")]
public IActionResult GetFile(string filepath)
{
    // filepath parametresi URL'nin files sonrası tüm kısmını içerir
    return Content("İstenen dosya yolu: " + filepath);
}
/files/images/photo.jpg isteği geldiğinde:
filepath = "images/photo.jpg" olur.

/files/docs/report.pdf isteği geldiğinde:
filepath = "docs/report.pdf" olur.

Neden Kullanılır?
Dinamik sayfa veya içerik yükleme (CMS uygulamaları gibi)
Statik dosyalar veya klasör yapıları için esnek erişim
Tüm bilinmeyen URL’leri özel olarak yönetmek (404 sayfaları için)
URL parametrelerini toplu almak

| Terim           | Anlamı                                                         |
| --------------- | -------------------------------------------------------------- |
| Catch-All Route | URL’nin kalan tüm kısmını tek parametreyle yakalayan rota tipi |
| Kullanım Alanı  | Dosya yolları, dinamik içerik, 404 sayfa yönetimi              |

//Catch-all Route Parameter
app.MapGet("/files/{*filePath}", (string filePath) =>
{
    return $"Requested file path: {filePath}";
});

Query Parameters Nedir?
Query Parameters (Sorgu Parametreleri), bir HTTP isteğinde URL'nin sonunda, genellikle veri filtrelemek, sıralamak, arama yapmak veya sayfalama gibi işlemler için kullanılan anahtar-değer çiftleridir.

Yapı (Söz Dizimi):
https://example.com/products?category=electronics&sort=price_asc
Bu URL’de:
? → Sorgu parametrelerinin başladığını gösterir.
category=electronics → category adında bir parametre, değeri electronics
& → Birden fazla parametre arasında ayraç olarak kullanılır.
sort=price_asc → sort adında başka bir parametre, değeri price_asc

| Kullanım Alanı          | Açıklama                                    |
| ----------------------- | ------------------------------------------- |
| 🔍 Arama                | `?q=telefon` → "telefon" kelimesiyle ara    |
| 🗂️ Filtreleme          | `?category=books` → Sadece kitapları göster |
| 🔃 Sıralama             | `?sort=price_desc` → Fiyatına göre sırala   |
| 📄 Sayfalama            | `?page=2&limit=10` → 2. sayfa, 10 ürün      |
| 🔧 Ayarlar / seçenekler | `?showDetails=true` → Detayları göster      |

 Örnek URL ve Anlamı:
https://api.example.com/users?age=30&sort=name_desc&page=2
Anlamı:
age=30 → 30 yaşındaki kullanıcıları getir
sort=name_desc → İsme göre azalan sırala
page=2 → İkinci sayfadaki sonuçları göster

Özetle:
Query Parameters, URL’ye ? ile eklenen, veri alma isteklerinde filtreleme, arama, sıralama ve sayfalama gibi işlemleri kontrol etmemizi sağlayan anahtar-değer çiftleridir. 
Uygulamalarda API endpoint’lerine esneklik ve detaylı sorgu gücü kazandırır.

//Route with Query Parameters
app.MapGet("/search", (string? q, int page = 1) =>
{                                                              https://localhost:7053/search?q=dotnet&page=2
    return $"Searching for {q} on page {page}";
});  
**Path kısmında boşluk bırakmamaya özen göstermeli hata almadım fakat 404 çevirdi o yüzden path içinde space yapılmamalı!


CRUD API'S

The main code: 
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

var blogs = new List<Blog>
{
    new Blog { Title = "First Blog", Body = "This is the body of the first blog." },
    new Blog { Title = "Second Blog", Body = "This is the body of the second blog." }
};

app.MapGet("/", () => "Hello World!");

app.MapGet("/blogs", () =>
{
    return blogs;
});

app.Run();

public class Blog
{
    public required string Title { get; set; }
    public required string Body { get; set; }
}

READ CRUDE (GET)
app.MapGet("/blogs/{id}", (int id) =>
{
    if(id >= 1 && id <= blogs.Count)
    {
        return Results.Ok(blogs[id - 1]);
    }
    else
    {
        return Results.NotFound(); //throw new ArgumentOutOfRangeException(nameof(id), "Blog not found");
    }
});

CREATE CRUDE (POST)
//Create a new blog
app.MapPost("/blogs", (Blog blog) =>{ List nesnesi oluşturuyoruz, çünkü listeye yeni eleman eklememiz lazım. Results.Created() ASP.NET Core Minimal API’de HTTP 201 Created yanıtı döndürmek için kullanılan bir yardımcı metottur.
    blogs.Add(blog);
    return Results.Created($"/blogs/{blogs.Count -1}", blog);
});

DELETE CRUDE (DELETE)
app.MapDelete("/blogs/{id}", (int id) => {
    if(id >= 1 && id <= blogs.Count)
    {
        blogs.RemoveAt(id -1 );
        return Results.NoContent(); //204 No Content? HTTP 204 durumu, bir isteğin (genelde PUT, DELETE) başarıyla işlendiğini fakat sunucunun döndürecek içeriği olmadığını belirtir.
    }
    else    
    {
        return Results.NotFound(); //throw new ArgumentOutOfRangeException(nameof(id), "Blog not found");
    }
});

UPDATE CRUDE (PUT)
//Update a blog
app.MapPut("/blogs/{id}", (int id, Blog blog) =>
{
    if (id >= 1 && id <= blogs.Count)
    {
        blogs[id - 1] = blog; // Update the blog at the specified index
        return Results.Ok($"Updated: {blog}");
    }
    else
    {
        return Results.NotFound(); //throw new ArgumentOutOfRangeException(nameof(id), "Blog not found");
    }
});
